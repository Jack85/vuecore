

//AUTOGENERATED DO NOT EDIT THIS FILE 2018-07-16 10:16:26
////////////////////
// available hubs //
////////////////////
//#region available hubs
//JS header:


declare var $: any;
import fetchival from 'fetchival';

export class Api {
    constructor(baseurl: string, token: string) {
        this.url = baseurl;
        this.token = token;
        this.bHub = new bHub(this.url);
        this.test = new testcontroller(this.url);

    }
    url: string;
    token: string;

    public bHub: bHub;

    public test: testcontroller;

}
//#endregion available hubs


/** * The hub implemented by bVue.code.bHub    */
export class bHub {
    constructor(baseurl: string) {
        this.url = baseurl;
    }
    url: string;
    geth() {
        return {
            'Accept': 'application/json' //, token:this.cookie 
        };
    }
    public hello(search: string): Promise<string> {  //todo parametrize and make more dynamic
        return fetchival(this.url + '/test/hello', {
            headers: { 'Content-Type': 'application/json', token: 'yourcookie' }
        }).get({
            search: search
        });
    }
    public getPosts(search: string, orderby: string, page: number, pagesize: number): Promise<Post[]> {  //todo parametrize and make more dynamic
        return fetchival(this.url + '/bhub/GetPosts', {
            headers: this.geth()
        }).get({
            search: search,
            orderby: orderby,
            page: page,
            pagesize: pagesize
        });
    }

    public insertPost(p: Post): Promise<number> {
        return fetchival(this.url + '/bhub/InsertPost', {
            headers:  this.geth()
        }).post(
            p,
        );
    }
    public deletePost(id: number) {
        return fetchival(this.url + '/bhub/DeletePost', {
            headers: this.geth()
        }).get({
            id: id
        });
    }
}


/** * The hub implemented by bVue.code.controllers.testcontroller    */
export class testcontroller {
    constructor(baseurl: string) {
        this.url = baseurl;
    }
    url: string;
    public hello(search: string): Promise<string> {  //todo parametrize and make more dynamic
        return fetchival(this.url + '/test/hello', {
            headers: { 'Content-Type': 'application/json', token: 'yourcookie' }
        }).get({
            search: search
        });
    }
}
export class BEntity {
    ID : number;
    DateCreated : Date;
    DateChanged : Date; 
    Count : number;
}
export class Post extends BEntity {
   public  Title: string;
   public Content: string;
}

export default Api;
//#endregion data contracts

