<#@ template debug="false" hostspecific="true" language="C#" #>
//#@ import namespace="Newtonsoft.Json" #
<#@ assembly name="vuecore.dll" #>

<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNetCore.Mvc.ViewFeatures" #>

// @ import namespace="Microsoft.AspNetCore.Mvc.ApiExplorer"
<#@ @ import namespace="System.Reflection" #>
//nuget package dll hell resolverhow to import @ import namespace="Microsoft.NETCore.Targets" #
// #@ import namespace="Microsoft.AspNetCore.Mvc" #
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Threading.Tasks" #>

// #@ import namespace="System.Runtime" #
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="bVue" #>

<#@ Assembly name="EnvDTE" #>
<#@ output extension=".ts" #>
<# /* Environment.CurrentDirectory */ #><#
string assemblyName = "vuecore.dll";
string assemblyPath = Environment.CurrentDirectory + "\\bin\\Debug\\net5.0\\"+assemblyName;
//string[] namespaces = new string[]{ "bVue.code.controllers","bVue.code"};
#><# /*= assemblyPath*/ #><#
  ProxyDomain pd = new ProxyDomain();
//Assembly assembly = pd.GetAssembly(assemblyPath);
Assembly assembly = Assembly.LoadFrom(assemblyPath);
//Assembly assembly = Assembly.GetExecutingAssembly();
var asms = AppDomain.CurrentDomain.GetAssemblies();
List<Type> types = new List<Type>();
//foreach(var s in namespaces){
foreach(var a in asms)
{
 types = types.Concat(GetTypesInNamespace(assembly, "")).ToList();
 }
//}
#>

//AUTOGENERATED DO NOT EDIT THIS FILE <#= DateTime.Now.ToString() #>
////////////////////
// available hubs //
////////////////////
//#region available hubs
//JS header:


declare var $:any;
import fetchival from 'fetchival';

export class Api {
    constructor(baseurl: string) {
        this.url = baseurl;
  <#      foreach (var hub in types)
{
	string hName = GetController(hub.Name);
#>  
  this.<#= hub.Name!=null?hName:hName #> = new <#= hub.Name #>(this.url);	 
<#
}
#>
    }
    url:string;
<#
foreach (var hub in types)
{
	string hName = GetController(hub.Name);
#>

    /** * The hub implemented by <#=hub.FullName#>    */
  public  <#= hub.Name!=null?hName:hName #> : <#= hub.Name #> ;	 
<#
}
#>
}
//#endregion available hubs
<#
foreach (var hub in types)
{
	string hName = GetController(hub.Name);
#>

    /** * The hub implemented by <#=hub.FullName#>    */
  export class   <#= hub.Name #>
  {
    constructor(baseurl: string) {
        this.url = baseurl;
    }
    url:string;
      public hello(search:string):Promise<string>
      {  //todo parametrize and make more dynamic
          return fetchival(this.url+'/test/hello', { 
                headers: { 'Content-Type': 'application/json', token:'yourcookie' }    
                }).get({    
                    search:search	
                    });
         }
  }	 
<#
}
#>

export default Api;
//#endregion data contracts

<#+
	
public Type[] GetTypesInNamespace(Assembly assembly, string nameSpace)
{
    return assembly.GetTypes().Where(t => t.BaseType!=null && t.BaseType.Name.ToLower().EndsWith("controller")
     //&& String.Equals(t.Namespace, nameSpace, StringComparison.Ordinal)
     ).ToArray();
}
	private string GetController(string s)
    {
        return s.Replace("Controller","", StringComparison.InvariantCultureIgnoreCase);
    }
    class ProxyDomain : MarshalByRefObject
{
    public Assembly GetAssembly(string assemblyPath)
    {
        try
        {
            return Assembly.LoadFrom(assemblyPath);
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }
}

  

#>